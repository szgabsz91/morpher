apply plugin: 'jacoco'

dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    testCompile("org.assertj:assertj-core:${assertjVersion}")
}

afterEvaluate {
    if (project.hasProperty('mockingEnabled') && project.mockingEnabled == true) {
        dependencies {
            testCompile("org.mockito:mockito-core:${mockitoVersion}")
        }
    }
}

test {
    useJUnitPlatform {
        excludeTags 'exclude-during-build'
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'
    }
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/protocolbuffers/**')
        })
    }

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        xml.destination file("${buildDir}/reports/jacoco/jacoco.xml")
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}
build.dependsOn test
build.dependsOn jacocoTestReport

afterEvaluate {
    jacocoTestReport.doLast {
        def report = file("${buildDir}/reports/jacoco/jacoco.xml")
        logger.info("Checking coverage results: ${report}")

        def testCoverageLimits = [
            instruction : 100.0,
            line: 100.0,
            branch: 100.0,
            class: 100.0
        ]
        if (project.hasProperty('testCoverageLimits')) {
            testCoverageLimits = project.testCoverageLimits
        }

        def parser = new XmlParser()
        parser.setFeature('http://apache.org/xml/features/nonvalidating/load-external-dtd', false);
        parser.setFeature('http://apache.org/xml/features/disallow-doctype-decl', false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
            instruction: percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
            line: percentage(counters.find { it.'@type'.equals('LINE') }),
            branch: percentage(counters.find { it.'@type'.equals('BRANCH') }),
            class: percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def metricsCanBeIncreased = false
        def failures = []
        metrics.each {
            def limit = testCoverageLimits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
            else if (it.value > limit) {
                logger.quiet("${it.key} can be increased to ${it.value}%")
                if (!metricsCanBeIncreased) {
                    metricsCanBeIncreased = true
                }
            }
        }

        if (failures) {
            logger.quiet('------------------ Code Coverage Failed -----------------------')
            failures.each {
                logger.quiet(it)
            }
            logger.quiet('---------------------------------------------------------------')
            throw new GradleException('Code coverage failed')
        }
        else {
            logger.info('Passed Code Coverage Checks')
        }

        if (metricsCanBeIncreased) {
            throw new GradleException('Some of the metrics can be increased')
        }
    }
}

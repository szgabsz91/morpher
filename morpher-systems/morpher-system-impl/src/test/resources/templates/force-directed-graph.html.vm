<!DOCTYPE html>
<html>
    <head>
        <title>Force Directed Graph</title>
        <meta charset="utf-8">
        <style>
            .links line {
                stroke: #999;
                stroke-opacity: 0.6;
            }

            .nodes circle {
                stroke: #fff;
                stroke-width: 1.5px;
            }
        </style>
    </head>
    <body>
        <svg width="960" height="600"></svg>
        <script src="https://d3js.org/d3.v4.js"></script>
        <script>
            var svg = d3.select('svg');
            var width = svg.attr('width');
            var height = svg.attr('height');

            var color = d3.scaleOrdinal(d3.schemeCategory20);

            var simulation = d3.forceSimulation()
                .force('link', d3.forceLink().id(d => d.id))
                .force('charge', d3.forceManyBody())
                .force('center', d3.forceCenter(width / 2, height / 2));

            var graph = $graph;

            var link = svg.append('g')
                .attr('class', 'links')
                .selectAll('line')
                .data(graph.links)
                .enter()
                    .append('line')
                    .attr('stroke-width', 1);

            var node = svg.append('g')
                .attr('class', 'nodes')
                .selectAll('circle')
                .data(graph.nodes)
                .enter()
                    .append('circle')
                    .attr('r', 5)
                    .attr('fill', 'black')
                    .call(d3.drag()
                        .on('start', dragstarted)
                        .on('drag', dragged)
                        .on('end', dragended));

            node
                .append('title')
                .text(d => d.id);

            simulation
                .nodes(graph.nodes)
                .on('tick', ticked);

            simulation
                .force('link')
                .links(graph.links);

            function ticked() {
                link
                    .attr('x1', d => d.source.x)
                    .attr('y1', d => d.source.y)
                    .attr('x2', d => d.target.x)
                    .attr('y2', d => d.target.y);

                node
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y);
            }

            function dragstarted(d) {
                if (!d3.event.active) {
                    simulation
                        .alphaTarget(0.3)
                        .restart();
                }

                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) {
                    simulation.alphaTarget(0);
                }

                d.fx = null;
                d.fy = null;
            }
        </script>
    </body>
</html>
